---
title: Making a simple adaptive Flexdashboard
author: Lukas Feuer
date: '2022-01-07'
slug: blood-values
categories: ["R"]
tags: ["flexdashboard", "R", "meta programming"]
---



<style type="text/css">

p {
  text-align: justify;
}

.content .flexdashboard {
  height: 80vh;
  width: 1050px;
  border-style:none;
  margin: 0px -15vw  0px;
  padding: 0px 0px;
}

</style>
<p><em>First time writing a blog post - don’t expect too much</em></p>
<p>This short post documents how some time ago I made a flexdashboard to easily monitor blood examination results over time and make them more comparable for the patient; for example as part of a patient empowerment initiative (<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>Reichardt &amp; Gastmeier, 2013). While the dashboard itself is nothing special I think it might be interesting to other data scientists how I realized the tabset feature, which automatically adjusts the number of tab-panels and plots to the number of variables in the data.</p>
<hr />
<iframe class="flexdashboard" src="blood_dash.html">
</iframe>
<p>→ <a href="blood_dash.html">View the full-screen flexdashboard</a></p>
<hr />
<p>You can find the code for the dashboard above at my <a href="https://github.com/lukasfeuer/flexdashboard_blood.git">GitHub</a>. A great advantage of this approach is that I didn’t have to write the code for every tab separately (don’t repeat yourself), which also would have made the application much less flexible in case the number of variables in the data changes.</p>
<p>As you can see below, for the main piece of work for the responsive tabset I was inspired by a post similar to that of <a href="https://github.com/dantonnoriega">Danton Noriega</a> but unfortunately I can’t find the post I originally build upon anymore. An important addition from my side however was <code>{r, results='asis', echo = FALSE}</code> inside of <code>a2 &lt;- knitr::knit_expand([...])</code> instead of just <code>{r}</code> (see line 33 below). For me at least this was necessary for the tabset to render as intended in the specific configuration I put it in the UI. This took me some time to figure out which is one of the reasons I wrote this post; just to remind myself.</p>
<p>You can also see that I build a function to create the ggplots and directly called this function in the iteratively build code chunks. I think however, that the approach by Danton Noriega is more elegant and possibly faster. Looking back at my post now about one year later, I think I would do it the same way he did, if I had to rewrite the dashboard. Apart from that today I would make (and am) much more use of the tidyverse in general.</p>
<p>Another feature that I’d like to point out is the table (formattable) on the right. It shows the results of the latest blood examination entry. It also calculates the difference (Diff) to the entry before that and displays rising values with a green arrow and declining values with a red arrow.</p>
The code by Danton Noriega for the tabset:
<script src="https://gist.github.com/dantonnoriega/61559f39c06df92cca1f594bc63bcb8f.js"></script>
<hr />
<div id="annotations" class="section level1">
<h1>Annotations</h1>
<p>
<ul>
<li>
The data presented in this dashboard is randomly generated
</li>
<li>
If you take a look at the code you might notice that a lot of the transformations are still written in quite clumsy base R. I wrote the code for this dashboard some while back before I learned of the tidyverse and just rewrote some select parts for this post.
</li>
<li>
I wrote the original version of this dashboard in German which is why there are still some German terms and expressions even after a quick revision for this post
</li>
</ul>
</p>
<hr />
<details>
<summary>
<b>Technical note</b>: Incorporating a flexdashboard into blogdown
</summary>
<p>
<p>A few days ago I read a post by <a href="https://www.benjaminsorensen.me/post/libib-dashboard/">Benjamin Chang Sorensen</a> describing how to add a flexdashboard to a blogdown page (as seen above). He described a problem with the display of the tabset which I also observed, when the dashboard is confined to the custom width of the content (<code>max-width: 700px</code>). If the display of the dashboard is allowed to occupy more space, the tabset is displayed perfectly.</p>
<p>Just as well as Benjamin Chang Sorensen describes it, I too had some problems referencing my flexdashboard in the beginning. The solution that worked for me was to create and render/knit the .Rmd document in the <code>/static/</code> folder, where I created a separate folder for the project. After rendering I copied the .html file directly into the <code>/content/post/[Making a simple adaptive flexdashboard]</code> folder of the post.</p>
<code>html &lt;iframe class="flexdashboard" src="blood_dash.html"&gt; &lt;/iframe&gt;</code>
</p>
</details>
</div>
<div class="footnotes footnotes-end-of-document">
<hr />
<ol>
<li id="fn1"><p>Reichardt, C., &amp; Gastmeier, P. (2013). Patienten-Empowerment. Radiopraxis, 6(04), 223-230.<a href="#fnref1" class="footnote-back">↩︎</a></p></li>
</ol>
</div>
